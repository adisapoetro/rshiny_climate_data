df.daily.manual.gsheet.2 <- df.daily.manual.gsheet.2  %>%
dplyr::select(1:13) %>%
drop_na(1) %>%
mutate(date= dmy(`Date Entry`)) %>%
distinct(date, .keep_all = TRUE) %>%
mutate_if(is.character,as.numeric) %>%
#    mutate(sunshine_hour = sum(2:13)) %>%
dplyr::select(-1) %>%
mutate(sunshine_hour.sum = rowSums(across(where(is.numeric)))) %>%
mutate(sunshine_hour.sum = lead(sunshine_hour.sum)) %>%
mutate(sunshine_hour.sum = replace(sunshine_hour.sum,sunshine_hour.sum>12, NA)) %>%
dplyr::select(13:14) %>%
mutate_all(~ifelse(is.infinite(.), NA, .)) %>%  # replace Inf
mutate_all(~ifelse(is.nan(.), NA, .))  %>%
mutate(date=as.Date(date))#replace NAN
df.daily.manual.gsheet <- df.daily.manual.gsheet.1 %>%
distinct(ID, .keep_all = TRUE) %>%
#  dplyr::filter(rowSums(is.na(df.daily.manual.raw)) != ncol(df.daily.manual.raw)) %>%
clean_names() %>%
mutate(date_time=paste0(date_entry," ",entry_hour)) %>%
mutate(date= dmy_hm(date_time)) %>%
arrange(date) %>%
relocate(date) %>%
mutate(wind_direction_degree = case_when(wind_direction == "NE" ~ 45,
wind_direction == "SE" ~ 135,
wind_direction == "SW" ~ 225,
wind_direction == "NW" ~ 315,
wind_direction == "N" ~ 0,
wind_direction == "E" ~ 90,
wind_direction == "S" ~ 180,
wind_direction == "W" ~ 270)) %>%
mutate_if(is.character,as.numeric) %>%
mutate(radiation_cal_cm2_h = 30.18760919*(gun_bellani_p1-gun_bellani_p0)-24.0215024) %>%
mutate(radiation_cal_cm2_h = lead(radiation_cal_cm2_h)) %>%
mutate(radiation_cal_cm2_h = replace(radiation_cal_cm2_h,radiation_cal_cm2_h<0, NA))  %>%
mutate(radiation_cal_cm2_h = replace(radiation_cal_cm2_h,radiation_cal_cm2_h>800, NA))  %>%
mutate(evaporation_mm =  pan_class_a_p0 - pan_class_a_p1+ rainfall_observed ) %>%
mutate(evaporation_mm = replace(evaporation_mm,evaporation_mm<0, NA))  %>%
mutate(evaporation_mm = replace(evaporation_mm,evaporation_mm>8, NA))  %>%
mutate(evaporation_mm = replace(evaporation_mm,rainfall_observed>80, NA))  %>%
mutate(evaporation_mm = lead(evaporation_mm)) %>%
mutate(wind_speed_kmh = windrun_meter-lag(windrun_meter, default = first(windrun_meter))) %>%
mutate(wind_speed_kmh = replace(wind_speed_kmh,wind_speed_kmh<0, NA))  %>%
dplyr::rename(temperature_c = dry_bulb, rh_percent=humidity, temperature_c.max =temp_max,
temperature_c.min=temp_min, rain_mm=rainfall_observed, soil_temp_3cm_c = soil_temp_3_cm ,
soil_temp_5cm_c = soil_temp_5_cm, soil_temp_10cm_c = soil_temp_10_cm, soil_temp_20cm_c = soil_temp_20_cm,
soil_temp_25cm_c = soil_temp_25_cm,
temperature_wet_c = wet_bulb) %>%
dplyr::select(date, temperature_c.min, temperature_c,temperature_c.max,  rh_percent,
rain_mm, evaporation_mm, radiation_cal_cm2_h, wind_speed_kmh, wind_direction_degree, soil_temp_3cm_c , soil_temp_5cm_c ,
soil_temp_10cm_c , soil_temp_20cm_c , soil_temp_25cm_c , temperature_wet_c ) %>%
summarise_by_time(date, .by = "day",
temperature_c.min= min(temperature_c.min, na.rm=TRUE), temperature_c.mean= mean(temperature_c, na.rm=TRUE) ,temperature_c.max= max(temperature_c.max, na.rm=TRUE),
rh_percent.min= min(rh_percent, na.rm=TRUE), rh_percent.mean= mean(rh_percent, na.rm=TRUE), rh_percent.max= max(rh_percent, na.rm=TRUE),
rain_mm.sum = sum(rain_mm, na.rm=TRUE),
evaporation_mm.mean = mean(evaporation_mm, na.rm=TRUE),
radiation_cal_cm2_h.mean = mean(radiation_cal_cm2_h, na.rm=TRUE),
wind_speed_kmh.mean = mean (wind_speed_kmh, na.rm=TRUE),
soil_temp_3cm_c.mean = mean(soil_temp_3cm_c, na.rm=TRUE), soil_temp_5cm_c.mean = mean(soil_temp_5cm_c, na.rm=TRUE),
soil_temp_10cm_c.mean = mean(soil_temp_10cm_c, na.rm=TRUE),
soil_temp_20cm_c.mean = mean(soil_temp_20cm_c, na.rm=TRUE), soil_temp_25cm_c.mean = mean(soil_temp_25cm_c, na.rm=TRUE),
temperature_wet_c.mean = mean(temperature_wet_c, na.rm=TRUE)) %>%
mutate(date=as.Date(anytime(date))) %>%
left_join(df.daily.manual.gsheet.2, by = "date") %>%
drop_na(date) %>%
distinct(date, .keep_all = TRUE) %>%
pad_by_time() %>%
mutate_all(~ifelse(is.infinite(.), NA, .)) %>%  # replace Inf
mutate_all(~ifelse(is.nan(.), NA, .)) %>% #replace NAN
miceRanger::miceRanger() %>%
completeData() %>%
extract2(5) %>%
mutate(date = as.Date(date))
# Merge with older homogenized data
df.daily.manual <- df.manual.homogenized.imputed %>%
dplyr::select(-1) %>%
#   full_join(df.daily.manual, by= "date") %>%
filter_by_time(date, .end_date = "2021-12-31") %>%
bind_rows(df.daily.manual.gsheet)
} # QC and imputation since Gsheet (2021)
read.meteostat.hourly <- function() {
read.csv.gz <- function(file)  {
dat <- fread(file)
dat$fname <- file
dat$fname <- stri_sub(dat$fname,-12,-8)
return(dat)
} # read data
pth <- paste0(dir, "Climate Data/09 BMKG/hourly")
list <-lapply(list.files(path =pth,
pattern = ".csv.gz", full.names = TRUE),read.csv.gz)
df <- rbindlist (list,  fill=TRUE)
df <- df %>%
dplyr::select(V1, V2, V3, V4, V5,V8, V9, V11, fname) %>%
dplyr::rename(date = V1, time =V2, temperature_c =V3, dew_temperature_c =V4, rh_percent= V5,
pressure_mbar = V11, id = fname, wind_speed_kmh = V9, wind_direction_degree=V8) %>%
mutate(date_time = paste(date, time, sep = " ")) %>%
mutate(date_time = paste(date_time, ":00", sep="")) %>%
mutate(date_time = ymd_hm(date_time)) %>%
dplyr::select(-date, -time) %>%
relocate(date_time) %>%
ungroup()
return(df)
} # hourly data # Get the data first  from python visual studio
read.meteostat.daily.deprecated <- function() {
read.csv.gz <- function(file)  {
dat <- fread(file)
dat$fname <- file
dat$fname <- stri_sub(dat$fname,-12,-8)
return(dat)
} # read data
pth <- paste0(dir, "Climate Data/09 BMKG/daily")
list <-lapply(list.files(path =pth,
pattern = ".csv.gz", full.names = TRUE),read.csv.gz)
df <- rbindlist (list, fill=TRUE)
return(df)
} # Daily Data # Get the data first  from python visual studio
read.meteostat.deprecated <- function () {
df_meteostat_hourly <- read.meteostat.hourly()
df_meteostat_daily <-read.meteostat.daily()
df_meteostat_hourly <- df_meteostat_hourly %>%
dplyr::select(V1, V2, V3, V4, V5,V8, V9, V11, fname) %>%
dplyr::rename(date = V1, time =V2, temperature_c =V3, dew_temperature_c =V4, rh_percent= V5,
pressure_mbar = V11, id = fname, wind_speed_kmh = V9, wind_direction_degree=V8) %>%
mutate(date_time = paste(date, time, sep = " ")) %>%
mutate(date_time = paste(date_time, ":00", sep="")) %>%
mutate(date_time = ymd_hm(date_time)) %>%
dplyr::select(-date, -time) %>%
relocate(date_time) %>%
agg.daily.hourly() %>%
group_by(id) %>%
distinct(date, .keep_all = TRUE) %>%
ungroup()
df_meteostat<- read.daily.meteostat() %>%
dplyr::select(V1, V5, fname) %>%
dplyr::rename(id=fname, date=V1, rain_mm.sum = V5) %>%
distinct(date, .keep_all = TRUE) %>%
mutate(date=ymd(date)) %>%
right_join(df_meteostat_hourly, by=c("id", "date"))
} # combine hourly temperature|RH and daily rain
read.ombro.all <- function () {
pth1 <- paste0(dir, "Climate Data/02 SAP/for r")
pth3 <- paste0(dir, "Climate Data/02 SAP/estate_code.xlsx")
## SAP Format
files <- list.files(path = pth1, pattern = ".txt", full.names = TRUE)
estate_code <- read_excel(pth3) %>%
select(-Estate, -Position_Record) %>%
mutate(id = coalesce(id,cost_ctr))
## Function for changing type of data into integer and Posixt
df.list <- lapply(files, function(x) read.delim2(x,sep="\t", header=T, na.strings=c("","NA")))
## Apply Function and bind the rows of the dfs together
df_sap <- rbindlist(df.list) %>%
select(where(~sum(!is.na(.x)) > 0)) %>%
clean_names() %>%
select(-contains("x")) %>%
dplyr::select(1,2,3) %>%
na.omit() %>%
dplyr::rename(date = postg_date, rain_mm.sum = rainfall_quantity) %>%
left_join(estate_code, by="cost_ctr") %>%
select(-cost_ctr) %>%
mutate(rain_mm.sum = str_replace(rain_mm.sum, ",", ".")) %>%
mutate(rain_mm.sum = as.numeric(rain_mm.sum)) %>%
mutate(date=dmy(date)) %>%
group_by(id, date) %>%
summarise(rain_mm.sum = sum(rain_mm.sum)) %>%
ungroup() %>%
group_by(id) %>%
pad_by_time() %>%
mutate_all(~ifelse(is.na(.), 0, .)) %>% #replace NA
ungroup() %>%
relocate(id) %>%
mutate(date=as.Date(date))
df <- read.table(paste0(dir, "Climate Data/02 SAP/sap_ombro_2006_2021.txt"), header = TRUE) %>%
mutate(date = ymd(date)) %>%
rbind(df_sap)
df <- df %>%
group_by(id) %>%
pad_by_time(date) %>%
#filter(id=="ADPE-Division 3") %>%
#mutate(new = replace_na(new, 0)) %>%
mutate(new=cumsum(replace_na(rain_mm.sum, 0))) %>%
#mutate(new = cumsum(coalesce(rain_mm.sum, 0)) + rain_mm.sum*0) %>%
mutate(new = case_when(new == 0 ~ 1,
new > 0 ~ new)) %>%
group_by(grp = rleid(rain_mm.sum)) %>%
mutate(rain_mm.sum  = if(n() >90 & all(rain_mm.sum == 0 | is.na(rain_mm.sum)) & all(new > 0)) NA else rain_mm.sum) %>%
ungroup() %>%
select(-grp, -new)
}
read.ombro.all.monthly <- function () {
pth1 <- paste0(dir, "Climate Data/02 SAP/for r")
pth3 <- paste0(dir, "Climate Data/02 SAP/estate_code.xlsx")
pth4 <- paste0(dir, "Climate Data/02 SAP/CH_HH_BULANAN_from_90s")
## SAP Format
files <- list.files(path = pth1, pattern = ".txt", full.names = TRUE)
files4 <- list.files(path = pth4, pattern = ".xlsx", full.names = TRUE)
estate_code <- read_excel(pth3) %>%
select(-Estate, -Position_Record) %>%
mutate(id = coalesce(id,cost_ctr))
## Function for changing type of data into integer and Posixt
df.list4 <- lapply(files4, function(x) read_excel(x)) %>%
rbindlist() %>%
rename(rain_mm.sum = rain_mm_sum) %>%
mutate(date=ym(date), rain_mm.sum=as.numeric(rain_mm.sum), raindays=as.numeric(raindays))
## Function for changing type of data into integer and Posixt
df.list <- lapply(files, function(x) read.delim2(x,sep="\t", header=T, na.strings=c("","NA")))
## Apply Function and bind the rows of the dfs together
df_sap <- rbindlist(df.list) %>%
select(where(~sum(!is.na(.x)) > 0)) %>%
clean_names() %>%
select(-contains("x")) %>%
dplyr::select(1,2,3) %>%
na.omit() %>%
dplyr::rename(date = postg_date, rain_mm.sum = rainfall_quantity) %>%
left_join(estate_code, by="cost_ctr") %>%
select(-cost_ctr) %>%
mutate(rain_mm.sum = str_replace(rain_mm.sum, ",", ".")) %>%
mutate(rain_mm.sum = as.numeric(rain_mm.sum)) %>%
mutate(date=dmy(date)) %>%
group_by(id, date) %>%
summarise(rain_mm.sum = sum(rain_mm.sum)) %>%
ungroup() %>%
group_by(id) %>%
pad_by_time() %>%
mutate_all(~ifelse(is.na(.), 0, .)) %>% #replace NA
ungroup() %>%
relocate(id) %>%
mutate(date=as.Date(date))
df <- read.table(paste0(dir, "Climate Data/02 SAP/sap_ombro_2006_2021.txt"), header = TRUE) %>%
mutate(date = ymd(date)) %>%
rbind(df_sap)
df <- df %>%
group_by(id) %>%
pad_by_time(date) %>%
#filter(id=="ADPE-Division 3") %>%
#mutate(new = replace_na(new, 0)) %>%
mutate(new=cumsum(replace_na(rain_mm.sum, 0))) %>%
#mutate(new = cumsum(coalesce(rain_mm.sum, 0)) + rain_mm.sum*0) %>%
mutate(new = case_when(new == 0 ~ 1,
new > 0 ~ new)) %>%
group_by(grp = rleid(rain_mm.sum)) %>%
mutate(rain_mm.sum  = if(n() >90 & all(rain_mm.sum == 0 | is.na(rain_mm.sum)) & all(new > 0)) NA else rain_mm.sum) %>%
ungroup() %>%
select(-grp, -new)
df <- df %>%
group_by(id) %>%
mutate(raindays = ifelse(rain_mm.sum > 0, 1, 0)) %>%
mutate (date = as.Date(date)) %>%
summarise_by_time(date, .by = "month", id=id,
rain_mm.sum = sum(rain_mm.sum),
raindays=sum(raindays)) %>%
dplyr::select(where(~sum(!is.na(.x)) > 0)) %>%  #delete column that contain only NA
mutate_all(~ifelse(is.nan(.), NA, .)) %>% #replace NAN
mutate_all(~ifelse(is.infinite(.), NA, .)) %>% # replace Inf
distinct() %>%
ungroup()
df <- df.list4 %>%
bind_rows(df) %>%
group_by(id) %>%
distinct(date, .keep_all = TRUE) %>%
ungroup()
df <- df %>%
group_by(id) %>%
pad_by_time(date) %>%
#filter(id=="ADPE-Division 3") %>%
#mutate(new = replace_na(new, 0)) %>%
mutate(new=cumsum(replace_na(rain_mm.sum, 0))) %>%
#mutate(new = cumsum(coalesce(rain_mm.sum, 0)) + rain_mm.sum*0) %>%
mutate(new = case_when(new == 0 ~ 1,
new > 0 ~ new)) %>%
group_by(grp = rleid(rain_mm.sum)) %>%
mutate(rain_mm.sum  = if(n() >6 & all(rain_mm.sum == 0 | is.na(rain_mm.sum)) & all(new > 0)) NA else rain_mm.sum) %>%
ungroup() %>%
select(-grp, -new)
df <- df %>%
mutate (etp = ifelse(raindays >10, 120, 150)) %>%
mutate(swr=200) %>%
mutate(wd=0) %>%
group_by(id)
df <- df %>%
group_by(id) %>%
mutate (etp = ifelse(raindays >10, 120, 150)) %>%
mutate(swr=200) %>%
mutate(wd=0) %>%
group_by(id) %>%
drop_na(rain_mm.sum)
mylist <- split(df, df$id)
wd <- function(df) {
for (i in (2:nrow(df))) {
df$swr[i] <- 200
df$wd[i] <- 0
df$swr[i] <- df$swr[i-1] + (df$rain_mm.sum[i]) - (df$etp[i])
df$swr[i][df$swr[i] > 200] <- 200
df$swr[i][df$swr[i] < 0] <- 0
df$wd[i] <-  (df$etp[i]) - df$swr[i-1] - (df$rain_mm.sum[i])
df$wd[i][df$wd[i] < 0] <- 0
}
return(df)
}
df_wd <- lapply(mylist, possibly(wd, NA))
df <- rbindlist(df_wd)
df <- df %>%
group_by(id) %>%
mutate(drainage_mm= lag(swr)+rain_mm.sum-etp-200) %>%
dplyr::rename(wd_mm =wd, etp_mm =etp, swr_mm=swr) %>%
mutate(drainage_mm=replace(drainage_mm, drainage_mm<0, 0)) %>%
dplyr::select(-etp_mm ,-swr_mm) %>%
ungroup() %>%
dplyr::select(where(~sum(!is.na(.x)) > 0))  #delete column that contain only NA
} #from database that begins in early 1990's
read.mysql <- function(df) {
df.deparse <- deparse(substitute(df))
df <- con %>%
dplyr::tbl(df.deparse) %>%
dplyr::collect() %>%
as.data.frame() %>%
mutate(date=ymd(date)) %>%
select(-contains("row_names"))
}
write.db.bulk <- function(con, name, x, append = TRUE, chunkSize = 10000, verbose = TRUE, ...) {
n = nrow(x)
i.to.n = 1:n
ii = split(i.to.n, ceiling(seq_along(i.to.n)/chunkSize) )
o = vector(length = length(ii))
if(verbose) pb = txtProgressBar(max = length(ii), style = 3)
for(i in 1:length(ii) )   {
z = x[ (ii[[i]]) ]
o[i] = RMariaDB::dbWriteTable(conn = con, name = name, value = z, append = TRUE, row.names = FALSE, ...)
if(verbose) setTxtProgressBar(pb, i)
}
all(o)
}
write.all.ombro <- function(df_ombro) {
write.all <-  function(df) {
write_xlsx(df,paste0("Monthly_rain_",unique(df$ID),".xlsx"))
return(df)
}
tes <- df_ombro %>%
group_by(id) %>%
agg.monthly.daily.ombro()
tes %>%
ungroup() %>%
mutate( `Monthly Rain (mm)` = rain_mm.sum, `Raindays (days)` = raindays,
`Monthly ETP (mm)` = etp_mm, `Monthly SWR (mm)` = swr_mm,
`Monthly wd (mm)` = wd_mm , `Monthly Drainage (mm)` = drainage_mm) %>%
mutate(Month=lubridate::month(date, label = TRUE)) %>%
mutate(Year= year(date)) %>%
rename(ID=id, Date=date) %>%
dplyr::select(ID, Year,Month, Date, `Monthly Rain (mm)`, `Raindays (days)`, `Monthly wd (mm)`,
`Monthly ETP (mm)`, `Monthly SWR (mm)`, `Monthly Drainage (mm)`) %>%
group_by(ID) %>%
do(write.all(.))
} # export excel files to be stored in shared folder
write.climpact <-  function(df) {
id_aws <- as.character (head(df$id, 1))
min_year <- df %>%
mutate(month = month(date), year = year(date), day= day(date)) %>%
dplyr::filter(month == 1) %>%
dplyr::filter(day == 1) %>%
slice_head(n=1) %>%
dplyr::select(year) %>%
as.character()
max_year <- df %>%
mutate(month = month(date), year = year(date), day= day(date)) %>%
dplyr::filter(month == 12) %>%
dplyr::filter(day == 31) %>%
arrange(desc(year)) %>%
slice_head(n=1) %>%
dplyr::select(year) %>%
as.character()
df %>%
NaRV.omit() %>%
pad_by_time(date) %>%
mutate(year=year(date), month=month(date), day=day(date)) %>%
replace(is.na(.), -99.9) %>%
dplyr::select(year, month, day, rain_mm.sum, temperature_c.max, temperature_c.min) %>%
write.table(file=paste0(id_aws,'_climpact.txt'), row.names = FALSE,
col.names = FALSE  ,sep="\t")
sts_clim1005 %>%
dplyr::filter(id==id_aws) %>%
write.table(file=paste0(id_aws,'sts_climpact.txt'), row.names = FALSE,
col.names = FALSE  ,sep="\t")
}
write.ombro <- function(id, .start_date, .end_date) {
no.id <- as.character(id)
df <- daily_ombro %>%
dplyr::filter(grepl(no.id, id)) %>%
filter_by_time(.start_date = .start_date) %>%
bind_rows(df) %>%
group_by(id) %>%
agg.weekly.daily() %>%
reshape2::melt(id=c("id", "date")) %>%
reshape::cast(date~ id+variable) %>%
mutate(week=week(date)) %>%
mutate(month=month(date)) %>%
relocate(date,month, week) %>%
write_xlsx("no.id .xlsx")
}
# Sample ->  plot.climpact.ts.ann("www/output/df.daily.libz.homogenized.imputed_climpact/indices/df.daily.libz.homogenized.imputed_climpact_tn90p_ANN.csv",tn90p, Percent)
#  .. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Station Information                                                   ---------------------------------------------------
read_sts_clim1005 <- function() {
files <- list.files(path = paste0(dir,"Climate Data/13 Information/sts_clim1005"),
pattern = ".xlsx",
full.names = TRUE) %>%
lapply(function(x)read_excel(x, skip = 8)) %>%
rbindlist() %>%
drop_na(id) %>%
clean_names() %>%
dplyr::select(id, lon, lat, alt, region) %>%
mutate(lon=as.numeric(lon), lat=as.numeric(lat))
}
sts_clim1005 <- read_sts_clim1005()
read_sts_clim1005_map <- function() {
files <- list.files(path = paste0(dir,"Climate Data/13 Information/sts_clim1005"),
pattern = ".xlsx",
full.names = TRUE) %>%
lapply(function(x)read_excel(x, skip = 8)) %>%
rbindlist() %>%
drop_na(id) %>%
dplyr::rename(region = Region) %>%
dplyr::select(id, lon, lat, alt, region, `AWS Status`, `AWS Type`, `Manufacturer`) %>%
mutate(estate=id) %>%
mutate(lon=as.numeric(lon), lat=as.numeric(lat))
}
sts_clim1005_map <- read_sts_clim1005_map()
sts_bmkg <- read_csv(paste0(dir,"Climate Data/13 Information/sts_bmkg/sts_bmkg.csv")) %>%
mutate(id = as.character(id))# Or you can use the following figure to read the data
#sts_bmkg <-  stations_ogimet(country = "Indonesia", add_map = TRUE) %>% rename(id=wmo_id) %>% dplyr::dplyr::select(id, lon, lat, alt)
sts_ombro <-  read_excel(paste0(dir, "Climate Data/13 Information/sts_ombro/Kode Kebun Komersial.xlsx"))
sts <- sts_clim1005 %>%
bind_rows(sts_bmkg) %>%
bind_rows(sts_ombro)
# Station Maps                                                          -----------------------------------------------------------
library(RgoogleMaps)
pal <- colorFactor(palette = 'Set1', domain = sts_clim1005_map$`AWS Status`)
pal2 <- colorFactor(palette = 'Dark2', domain = sts_clim1005_map$Manufacturer)
leaflet(sts_clim1005_map, options = leafletOptions(zoomControl = FALSE)) %>%
htmlwidgets::onRender("function(el, x) {L.control.zoom({ position: 'bottomleft' }).addTo(this)}") %>%
addTiles(group = "Open Street Map") %>%
addProviderTiles("Esri.WorldImagery", group = "Esri World Imagery") %>%
addScaleBar(position = "bottomleft") %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius=4, label=~id,  layerId = ~id, color=~pal(`AWS Status`), group = "AWS Status")%>%
addCircleMarkers(lng = sts_bmkg$lon, lat = sts_bmkg$lat, radius=1, label=sts_bmkg$id,  layerId = sts_bmkg$id, group = sts_bmkg$id) %>%
# addCircleMarkers(lng = ~lon, lat = ~lat, radius=4, label=~id,  color=~pal2(`Manufacturer`), group = "Manufacturer") %>%
leaflet::addLegend(pal = pal, values = ~`AWS Status`,position = "topright",  group = "AWS Status") %>%
#  leaflet::addLegend(pal = pal2, values = ~Manufacturer,position = "topright",  group = "Manufacturer") %>%
addLayersControl(overlayGroups = c("AWS Status", "Manufacturer"), baseGroups = c("Open StreetMap", "Esri World Imagery"),
options = layersControlOptions(collapsed = TRUE), position = "bottomright") %>%
addMeasure(primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
completedColor = "#ff0000",
activeColor = "#ad3b3b", position = "bottomleft")
rm(pal, pal2)
# General Data                                                          ------------------------------------
# df_meteostat <- read.meteostat()
# df_ombro <- read.ombro.all()
# df_manual <- read.manual.gsheet()
# MySQL Connection                                                      --------------------------------------------------------
#killDbConnections() # to kill all dbconnecion
con <- dbConnect(RMySQL::MySQL(),user = user.name,password = pass, dbname = 'climdata',host = 'smartri1005.mysql.database.azure.com')
#con <- dbConnect(RMySQL::MySQL(), user = 'adisapoetro', password = 'gedungbaru09!', dbname = 'climate_data', host = 'climatedata.mysql.database.azure.com')
dbListTables(con)
# dbWriteTable(conn = con, name = "df_aws",  value = df_aws, overwrite = TRUE)  ## x is any data frame
# dbWriteTable(conn = con, name = "df_ombro_aws",  value = df_ombro_aws, overwrite = TRUE)  ## x is any data frame
# dbWriteTable(conn = con, name = "df_meteostat",  value = df_meteostat, overwrite = TRUE)  ## x is any data frame
# dbWriteTable(conn = con, name = "df_ombro",  value = df_ombro, overwrite = TRUE)  ## x is any data frame
# dbWriteTable(conn = con, name = "df_manual",  value = df_manual, overwrite = TRUE)  ## x is any data frame
########################################################################
filtered_df_weekly <- read.mysql(df_weekly_filtered)
filtered_df_weekly <- filtered_df_weekly %>%
mutate(across('estate', str_replace, 'A', '111')) %>%
mutate(across('estate', str_replace, 'B', '121')) %>%
mutate(across('estate', str_replace, 'C', '131')) %>%
mutate(across('estate', str_replace, 'D', '141')) %>%
mutate(across('estate', str_replace, 'E', '151')) %>%
mutate(across('estate', str_replace, 'F', '211')) %>%
mutate(across('estate', str_replace, 'G', '222')) %>%
mutate(across('estate', str_replace, 'H', '233')) %>%
mutate(across('estate', str_replace, 'I', '244')) %>%
mutate(across('estate', str_replace, 'J', '255')) %>%
mutate(across('estate', str_replace, 'K', '311')) %>%
mutate(across('estate', str_replace, 'L', '312')) %>%
mutate(across('estate', str_replace, 'M', '313')) %>%
mutate(across('estate', str_replace, 'N', '314')) %>%
mutate(across('estate', str_replace, 'O', '315')) %>%
mutate(across('estate', str_replace, 'P', '421')) %>%
mutate(across('estate', str_replace, 'Q', '422')) %>%
mutate(across('estate', str_replace, 'R', '423')) %>%
mutate(across('estate', str_replace, 'S', '424')) %>%
mutate(across('estate', str_replace, 'T', '425')) %>%
mutate(across('estate', str_replace, 'U', '511')) %>%
mutate(across('estate', str_replace, 'V', '512')) %>%
mutate(across('estate', str_replace, 'W', '513')) %>%
mutate(across('estate', str_replace, 'X', '514')) %>%
mutate(across('estate', str_replace, 'Y', '515')) %>%
mutate(across('estate', str_replace, 'Z', '525'))
library(shiny); runApp('app_nonsql_20220808.R')
runApp('app_nonsql_20220808.R')
runApp('app_nonsql_20220808.R')
library(shiny); runApp('app_nonsql_20220808.R')
runApp('app_nonsql_20220808.R')
library(shiny); runApp('app_nonsql_20220808.R')
runApp('app_nonsql_20220808.R')
library(shiny); runApp('app_nonsql_20220808.R')
runApp('app_nonsql_20220808.R')
runApp('app_nonsql_20220808.R')
runApp('app_nonsql_20220808.R')
runApp('app_nonsql_20220808.R')
runApp('app_nonsql_20220808.R')
runApp('app_nonsql_20220808.R')
runApp('app_nonsql_20220808.R')
runApp('app_nonsql_20220808.R')
