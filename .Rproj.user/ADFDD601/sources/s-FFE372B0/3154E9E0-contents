#rm(list=lsf.str())

# Library ---------------------------------------------------------------------
library(shinyLP)
library(shiny)
library(shinydashboard)
library(shiny.pwa)
library(plotly)
library(dplyr)
library(lubridate)
library(timetk)
library(shinycssloaders)
library(purrr)
library(leaflet)
library(weather)
library(icons)
library(rmarkdown)
library(shinydashboardPlus)


# UI ---------------------------------------------------------------------------
options(spinner.color="#d80202", spinner.color.background="#ffffff", spinner.size=2) # Options for Spinner (Loading Graphics)


## dashboard Page --------------------------------------
ui <- dashboardPage(skin = "black", 
                    header = dashboardHeader(title = span(img(src="CCI_lite.png",width="150",height="55"))),
                    #header = dbHeader,
                    footer = dashboardFooter(left = h1(strong( "Delivering Climate Intelegence amidst a Changing Climate")
                                                       , style = "font-size:12px;"),right =  span(img(src='climXdiad.png', height='40',width='220'))),
                    #Sidebar Page --------------------------------------
                    sidebar = dashboardSidebar(sidebarMenu(menuItem("Rain", tabName = "rain", icon =weather_icon("wi-rain"),
                                                          menuItem("Monthly",
                                                                   tabName = "monthly"),
                                                          menuItem("Weekly",
                                                                   tabName = "weekly"),
                                                          menuItem("Daily",
                                                                   tabName = "daily"),
                                                          menuItem("Water Deficit",
                                                                   tabName = "wd"),
                                                          menuItem("Rainfall Extremes",
                                                                   tabName = "rain_ex")),
                                                 menuItem("Automatic Weather Station", tabName = "AWS", icon =weather_icon("wi-hurricane-warning"),
                                                          menuItem("AWS Distribution Map",
                                                                   tabName = "aws_distribution"),
                                                          menuItem("AWS Daily Data",
                                                                   tabName = "aws_daily"),
                                                          menuItem("Real Time Telemetry",
                                                                   tabName = "telemetry")),
                                                 menuItem("Climate Driver Update", tabName = "climate_Driver", icon = icon("dashboard"),
                                                          menuItem("ENSO",
                                                                   tabName = "enso"),
                                                          menuItem("IOD",
                                                                   tabName = "iod"),
                                                          menuItem("SOI",
                                                                   tabName = "soi"),
                                                          menuItem("MJO",
                                                                   tabName = "mjo")),
                                                 menuItem("Secondary Resources", tabName = "secondary", icon =weather_icon("fire"),
                                                          menuItem("Local Fire Danger Rating",
                                                                   tabName = "lfdr"),
                                                          menuItem("Gobal Fire Danger Rating",
                                                                   tabName = "gfdr"),
                                                          menuItem("Secondary Climate Data",
                                                                   tabName = "secondary_climate_data")),
                                                 menuItem("Forecast", tabName = "climateforecast", icon = icon("list-alt"),
                                                          menuItem("Short-term Forecast",
                                                                   tabName = "shortterm_forecast"),
                                                          menuItem("Long-term Downscaled Forecast",
                                                                   tabName = "longterm_forecast")),
                                                 menuItem("Others", tabName = "other", icon = icon("info"),
                                                          menuItem("About",
                                                                   tabName = "about"),
                                                          menuItem("Manual",
                                                                   tabName = "manual"))
                                                 
                                                 )),
                    ## dashboard Body --------------------------------------
                    body = dashboardBody(pwa("https://libzclim.shinyapps.io/CCI_Lite/", output = "www", icon ="www/climatology.png", title = "CCI Lite" ), 
                                  tabItems(tabItem(tabName = "monthly",
                                                   fluidRow(box( title = "Monthly Rain",
                                                                collapsible = TRUE,
                                                                selectInput(inputId = "selected_region_monthly",
                                                                            label = "Select Region",
                                                                            choices = sort(unique(sts_ombro$region))), 
                                                                selectInput(inputId =  "selected_year_monthly", 
                                                                            label = "Time Series Year:", 
                                                                            choices = 2000:2022,
                                                                            selected = 2022),
                                                                sliderInput("slider_monthly", "Boxplot Range:",
                                                                            min = 2000, 
                                                                            max = as.numeric(format(Sys.Date(), "%Y")), 
                                                                            value = c(2000, as.numeric(format(Sys.Date(), "%Y"))),
                                                                            sep = "")),
                                                            box(title = textOutput("text_monthly_plot"), 
                                                                withSpinner(plotlyOutput("monthlyplot")), width=11))),
                                           tabItem(tabName = "weekly", 
                                                   fluidRow(box( title = "weekly Rain",
                                                                 collapsible = TRUE,
                                                                 selectInput(inputId = "selected_region_weekly",
                                                                            label = "Select Region",
                                                                            choices = sort(unique(sts_ombro$region))),
                                                                selectInput(inputId =  "selected_year_weekly", 
                                                                            label = "Time Series Year:", 
                                                                            choices = 2000:2022,
                                                                            selected = 2022),
                                                                sliderInput("slider_weekly", "Boxplot Range:",
                                                                            min = 2000, 
                                                                            max = as.numeric(format(Sys.Date(), "%Y")), 
                                                                            value = c(2000, as.numeric(format(Sys.Date(), "%Y"))),
                                                                            sep = "")),
                                                            box(title = textOutput("text_weekly_plot"), 
                                                                withSpinner(plotlyOutput("weeklyplot")), width = 11))),
                                           tabItem(tabName = "daily", 
                                                   fluidRow(box(collapsible = TRUE,
                                                                selectInput(inputId = "selected_id_daily",
                                                                            label = "Select id",
                                                                            choices = sort(unique(df_ombro_aws$id)))),
                                                            box(title = "Daily Rainfall", 
                                                                withSpinner(plotlyOutput("dailyplot")), width = 11))),
                                           tabItem(tabName = "wd", 
                                                   fluidRow(box(collapsible = TRUE,
                                                                selectInput(inputId = "selected_id_wd",
                                                                            label = "Select id",
                                                                            choices = unique(df_ombro_aws$id))),
                                                            box(title = "Water Deficit", 
                                                                withSpinner(plotlyOutput("wdplot")), width = 11))),
                                           tabItem(tabName = "rain_ex", 
                                                   fluidRow(box(collapsible = TRUE,
                                                                selectInput(inputId = "selected_id_rain_ex",
                                                                            label = "Select id",
                                                                            choices = unique(df_ombro_aws$id))),
                                                            box(title = "Raindays and Rainfall Extremes", 
                                                                withSpinner(plotlyOutput("rexplot")), width = 11))),
                                           tabItem(tabName = "aws_daily", 
                                                   fluidRow(box(selectInput(inputId = "selected_id_rain_ex",
                                                                            label = "Select id",
                                                                            choices = unique(df_ombro_aws$id))),
                                                            box(title = "Raindays and Rainfall Extremes", 
                                                                withSpinner(plotlyOutput("rexplot")), width = 11))),
                                           tabItem(tabName = "aws_distribution", 
                                                   selectizeInput(inputId = "region_selected",label = "Region", choices = sts_clim1005_map$region),
                                                   uiOutput("id_selected_ui"),
                                                   leafletOutput("map", width = "100%", height = 550)),
                                           tabItem(tabName = "telemetry",
                                                   iframe(width = "500", 
                                                          height = "400",
                                                          url_link = "https://www.weatherlink.com/embeddablePage/show/51781eab510c4403b9fcd70e124f1c46/fullscreen")),
                                           tabItem(tabName = "enso", 
                                                   #includeMarkdown('./user_guide/enso.rmd'),
                                                   fluidRow(box(imageOutput("image_enso", width = "auto")))
                                                   ),
                                           tabItem(tabName = "iod", 
                                                   #includeMarkdown('./user_guide/iod.rmd'),
                                                   fluidRow(box(div(img(src='iod.png',  width = "auto")), width=11))
                                                   ),
                                           tabItem(tabName = "soi", 
                                                   #includeMarkdown('./user_guide/soi.rmd'),
                                                   fluidRow(box(div(img(src='soi.png',  height = 200)), width=11))
                                                   ),
                                           tabItem(tabName = "mjo", 
                                                   #includeMarkdown('./user_guide/mjo.rmd'),
                                                   fluidRow(box(div(img(src='mjo.png',  height = 200)), width=11))
                                                   ),
                                           tabItem(tabName = "shortterm_forecast", 
                                                   fluidRow(box(iframe(width = "100%", height = "700px",
                                                                       url_link = "https://embed.windy.com/embed2.html?lat=-1.801&lon=121.113&detailLat=-6.173&detailLon=106.827&width=
                                            1400&height=450&zoom=5&level=surface&overlay=rain&product=ecmwf&menu=&message=&marker=true&calendar=now&pressure=
                                            &type=map&location=coordinates&detail=&metricWind=km%2Fh&metricTemp=%C2%B0C&radarRange=-1"),
                                                                h5(strong("Forecast Model : ECWMF (The European Centre for Medium-Range Weather Forecasts)")), width=12)))
                                           #,tabItem(tabName = "about", includeMarkdown('./user_guide/user_guide.rmd'))
                                           ,tabItem(tabName ="gfdr"  ,
                                                    iframe(width = "100%", height = "700px",
                                                    url_link = "https://worldview.earthdata.nasa.gov/?v=93.90862303172369,-13.5196545272304,141.11364485142798,
                                                      9.763239047384161&l=VIIRS_NOAA20_Thermal_Anomalies_375m_All,Coastlines_15m,Reference_Labels_15m,Reference_Features_15m,
                                                      MODIS_Terra_Thermal_Anomalies_Day(hidden),Land_Water_Map&lg=false&t=2022-03-28-T23%3A39%3A59Z"))
                                           ,tabItem(tabName = "secondary_climate_data", includeMarkdown('./user_guide/climate_data_sources.rmd'))
                                           #,tabItem(tabName = "about", includeMarkdown('./user_guide/aws_profile.rmd'))
                                           ))
                    
                    
                    
                    
                    )



# Server -----------------------------------------------------------------------
server <- function(input, output, session) {

## Image

  output$image_enso <- renderImage({
    filename <- normalizePath(file.path(paste0('www/', 'enso', '.png')))
    list(
      src = filename, 
      height = 200
    )
  }, deleteFile = FALSE)
  
## Maps -----------------------------------------------------------------
  output$map <- renderLeaflet({
    
    pal <- colorFactor(palette = 'Set1', domain = sts_clim1005_map$`AWS Status`)
    pal2 <- colorFactor(palette = 'Dark2', domain = sts_clim1005_map$Manufacturer)
    
    leaflet(sts_clim1005_map, options = leafletOptions(zoomControl = FALSE)) %>% 
      htmlwidgets::onRender("function(el, x) {L.control.zoom({ position: 'bottomleft' }).addTo(this)}") %>% 
      addTiles(group = "Open Street Map") %>% 
      addProviderTiles("Esri.WorldImagery", group = "Esri World Imagery") %>% 
      addScaleBar(position = "bottomleft") %>%
      #addCircleMarkers(lng = ~lon, lat = ~lat, radius=4, label=~id,  layerId = ~id, color=~pal(`AWS Status`), group = "AWS Status")%>%
      addCircleMarkers(lng = sts_bmkg$lon, lat = sts_bmkg$lat, radius=1, label=sts_bmkg$id,  layerId = sts_bmkg$id, group = sts_bmkg$id) %>% 
      addCircleMarkers(lng = ~lon, lat = ~lat, radius=4, label=~id,  color=~pal2(`Manufacturer`), group = "Manufacturer") %>%
      #leaflet::addLegend(pal = pal, values = ~`AWS Status`,position = "topright",  group = "AWS Status") %>% 
      leaflet::addLegend(pal = pal2, values = ~Manufacturer,position = "topright",  group = "Manufacturer") %>% 
      addLayersControl(overlayGroups = c("AWS Status", "Manufacturer"), baseGroups = c("Open StreetMap", "Esri World Imagery"), 
                       options = layersControlOptions(collapsed = TRUE), position = "bottomright") %>% 
      addMeasure(primaryLengthUnit = "meters",
                 primaryAreaUnit = "sqmeters",
                 completedColor = "#ff0000",
                 activeColor = "#ad3b3b", position = "bottomleft")
  })
  output$id_selected_ui <- renderUI({
    selectizeInput("region_id_map_selected", "AWS ID", choices=sts_clim1005_map$id[sts_clim1005_map$region==input$region_selected])
  })
  # WORKING CORRECTLY: Clicking region on map should update country and map selected 
  observeEvent(input$map_marker_click, {
    
    data <- reactiveValues(clickedMarker=NULL)
    
    
    if(!is.null(input$map_marker_click)){
      print("function 1 start - test")
      updateSelectizeInput(
        session, "region_selected", 
        selected = sts_clim1005_map$region[(sts_clim1005_map$lat==input$map_marker_click$lat)&(sts_clim1005_map$lon==input$map_marker_click$lng)])
    }
    
    print("function 2 start - test")
    data$clickedMarker <- input$map_marker_click
    print(data$clickedMarker)
    output$myTable <- renderTable({
      return(
        subset(sts_clim1005_map, id == data$clickedMarker$id)
      )
    })
    
  },  ignoreInit = TRUE)
  observe({
    if(!is.null(input$map_marker_click)){
      req(input$region_selected)
      updateSelectizeInput(
        session, "region_id_map_selected", 
        selected = sts_clim1005_map$id[(sts_clim1005_map$lat==input$map_marker_click$lat)&(sts_clim1005_map$lon==input$map_marker_click$lng)])
    }
    
  })# observe the marker click info and print to console when it is changed.
## Update/ observe input----------------------------  
  
  observe({    
    
    start_year <- input$slider_monthly[1]
    end_year <- input$slider_monthly[2]
    regional <- input$selected_region_monthly
    
    filtered_df_monthly <- filtered_df_monthly %>% 
      filter(region==regional) %>% 
      filter_by_time(date, .start_date = paste0(start_year,"-01-01"), .end_date = paste0(end_year,"-12-31"))
    
    min_year <- as.numeric(min(filtered_df_monthly$year))
    max_year <- as.numeric(max(filtered_df_monthly$year))
    # Control the value, min, max, and step.
    # Step size is 2 when input value is even; 1 when value is odd
  
    updateSelectInput(session, "selected_year_monthly", choices = min_year:max_year,
                selected = max_year)

  })

  observe({    
    
    start_year <- input$slider_weekly[1]
    end_year <- input$slider_weekly[2]
    regional <- input$selected_region_weekly
    
    filtered_df_weekly <- filtered_df_weekly %>% 
      filter(region==input$selected_region_weekly) %>% 
      filter_by_time(date, .start_date = paste0(start_year,"-01-01"), .end_date = paste0(end_year,"-12-31"))
    
    min_year <- as.numeric(min(filtered_df_weekly$year))
    max_year <- as.numeric(max(filtered_df_weekly$year))
    # Control the value, min, max, and step.
    # Step size is 2 when input value is even; 1 when value is odd
    
    updateSelectInput(session, "selected_year_weekly", choices = min_year:max_year,
                      selected = max_year)
    
  })
  

    
  
  
## Update slider ----------------------------------------------------------------------
  observe({    
      filtered_df_monthly <- filtered_df_monthly %>% 
        filter(region==input$selected_region_monthly) 
      
      min_year <- as.numeric(min(filtered_df_monthly$year))
      max_year <- as.numeric(max(filtered_df_monthly$year))
      # Control the value, min, max, and step.
      # Step size is 2 when input value is even; 1 when value is odd.
      updateSliderInput(session, "slider_monthly", 
                        min = min_year, 
                        max = max_year, 
                        value = c(min_year,max_year))
      })
  observe({    
    filtered_df_weekly <- filtered_df_weekly %>% 
      filter(region==input$selected_region_weekly) 
    
    min_year <- as.numeric(min(filtered_df_weekly$year))
    max_year <- as.numeric(max(filtered_df_weekly$year))
    # Control the value, min, max, and step.
    # Step size is 2 when input value is even; 1 when value is odd.
    updateSliderInput(session, "slider_weekly", 
                      min = min_year, 
                      max = max_year, 
                      value = c(min_year,max_year))
  })
## Output text for plot --------------------------------------------------------
  output$text_monthly_plot <- renderText({
    
    start_year <- input$slider_monthly[1]
    end_year <- input$slider_monthly[2]
    regional <- input$selected_region_monthly
    
    filtered_df_monthly <- filtered_df_monthly %>% 
      filter(region==regional) %>% 
      filter_by_time(date, .start_date = paste0(start_year,"-01-01"), .end_date = paste0(end_year,"-12-31"))
    
    start_year <- as.character(min(filtered_df_monthly$year)) 
    end_year <- as.character(max(filtered_df_monthly$year)) 
    
    paste0(regional, " - Boxplot (", start_year, "-" , end_year, ") - Timeseries (",input$selected_year_monthly, ")" )
    
  })
  output$text_weekly_plot <- renderText({
    
    start_year <- input$slider_weekly[1]
    end_year <- input$slider_weekly[2]
    regional <- input$selected_region_weekly
    
    filtered_df_weekly <- filtered_df_weekly %>% 
      filter(region==regional) %>% 
      filter_by_time(date, .start_date = paste0(start_year,"-01-01"), .end_date = paste0(end_year,"-12-31"))
    
    start_year <- as.character(min(filtered_df_weekly$year)) 
    end_year <- as.character(max(filtered_df_weekly$year)) 
    
    paste0(regional, " - Boxplot (", start_year, "-" , end_year, ") - Timeseries (", input$selected_year_weekly, ")" )
    
  })
  
## Monthly Plot ----------------------------------------------------------------
  output$monthlyplot <- renderPlotly({ 
    
    plot.monthly.fun <- function(start_year, end_year, regional) {
      
      filtered_df_monthly <- filtered_df_monthly %>% 
        filter(region==regional) %>% 
        filter_by_time(date, .start_date = paste0(start_year,"-01-01"), .end_date = paste0(end_year,"-12-31"))
      
      #   ts <- as.numeric(end_year)
      
      ggplotly(ggplot(filtered_df_monthly, aes(x = month, y = rain_mm.sum, group = month)) + 
                 geom_boxplot(fill="lightblue", colour="Gray", outlier.size = .5,  alpha = 0.9) +
                 geom_point(data = subset(filtered_df_monthly, year %in% c(input$selected_year_monthly)), aes(color=estate)) +
                 geom_line(data = subset(filtered_df_monthly, year %in% c(input$selected_year_monthly)), aes(color=estate, group =estate)) +
                 #           scale_color_brewer(palette = "Set1", direction = 1) +
                 labs( x= element_blank(),
                       y = "Rain (mm/month)",
                       subtitle = "Data : Subtitle",
                       caption = "Data : Caption"
                 ) +
                 theme_bw()) %>% 
        layout(legend = list(orientation = 'h'))
      
      
    }
    
    start_year <- as.character(input$slider_monthly[1])
    end_year <- as.character(input$slider_monthly[2])
    regional <- as.character(input$selected_region_monthly)
    
    plot.monthly.fun(start_year, end_year, regional)
    
  })
## weekly Plot -----------------------------------------------------------------
  output$weeklyplot <- renderPlotly({
    
    plot.weekly.fun <- function(start_year, end_year, regional) {
      
      
      filtered_df_weekly <- filtered_df_weekly %>% 
        filter(region==regional) %>% 
        filter_by_time(date, .start_date = paste0(start_year,"-01-01"), .end_date = paste0(end_year,"-12-31"))
      
      #ts <- max(filtered_df_weekly$year) 
      
      ggplotly(ggplot(filtered_df_weekly, aes(x = week, y = rain_mm.sum, group = week)) + 
                 geom_boxplot(fill="lightblue", colour="Gray", outlier.size = .1,  alpha = 0.4) +
                 geom_point(data = subset(filtered_df_weekly, year %in% c(input$selected_year_weekly)), aes(color=estate)) +
                 geom_line(data = subset(filtered_df_weekly, year %in% c(input$selected_year_weekly)), aes(color=estate, group =estate)) +
                 #       scale_color_brewer(palette = "Set1", direction = 1) +
                 labs(
                   x =element_blank(),
                   y = "Rain (mm/week)",
                   subtitle = "Data : Subtitle",
                   caption = "Data : Caption"
                 ) +
                 theme_bw()) %>% 
        layout(legend = list(orientation = 'h'))
      
      
      
    }
    
    start_year <- as.character(input$slider_weekly[1])
    end_year <- as.character(input$slider_weekly[2])
    regional <- as.character(input$selected_region_weekly)
    
    plot.weekly.fun(start_year, end_year, regional)
    
    
  })
## Daily Plot ------------------------------------------------------------------
  output$dailyplot <- renderPlotly({
    
    
    
    df_ombro_aws %>% 
      filter(id==input$selected_id_daily) %>%
      #   filter(date >= input$daterange_ombro[1] & date <= input$daterange_ombro[2]) %>% 
      ggplot() +
      aes(x = date, weight = rain_mm.sum) +
      geom_bar(fill = "#005BFF") +
      labs(y = "Rain (mm)") +
      theme_bw() +
      ggtitle(" ") +
      theme( axis.title.y = element_text(size = 14L,
                                         face = "bold"),
             axis.title.x = element_text(size = 14L,
                                         face = "bold")
      )
    
    
  })
## Other Plots -----------------------------------------------------------------
  output$wdplot <- renderPlotly({
  df.ombro.wd <- df_ombro_aws %>%
    filter(id==input$selected_id_wd) %>%
    agg.monthly.daily.ombro() %>%
#   filter(date >= input$daterange_ombro[1] & date <= input$daterange_ombro[2]) %>% 
    select(date, wd_mm, drainage_mm) %>%
    mutate(wd_mm = wd_mm*-1) %>%
    reshape2::melt(id.var = c('date')) %>% 
    filter(variable!="id") %>% 
    mutate(value=as.numeric(value)) 
  
  df.ombro.wd.plot  <- ggplot(df.ombro.wd) +
    aes(x = date,  y = value, fill = variable, colour = variable, group = variable) +
    geom_area(size = 0.5) +
    scale_fill_manual(values = c(wd_mm = "#FF1100", drainage_mm = "#0024FF")) +
    scale_color_manual(values = c(wd_mm = "#FF1100",drainage_mm = "#0024FF")) +
    labs(y = "(mm)", x=element_blank()) +
    theme_bw() +
    theme(text = element_text(size = 12), axis.title.y = element_text(size = 12L, face = "bold"), 
          axis.title.x = element_text(size = 14L, face = "bold"))
  
  ggplotly(df.ombro.wd.plot) %>% 
    layout(legend = list(orientation = 'h'))
  
  
  })
  output$rexplot <- renderPlotly({

  df <- df_ombro_aws %>%
    filter(id==input$selected_id_rain_ex ) %>%
#    filter(date >= input$daterange_ombro[1] & date <= input$daterange_ombro[2]) %>% 
    agg.monthly.daily %>% 
    mutate(rain_mm= as.numeric(rain_mm.sum)) %>% 
    mutate(raindays = as.numeric(raindays))
  
  # create plot
  # axis properties
  minyaxis1 <- floor(min(0.0,min(df$rain_mm.sum)))
  maxyaxis1 <- ceiling(max(800.0,max(df$rain_mm.sum)))
  minyaxis2 <- 0.0
  maxyaxis2 <- 40
  
  dateRange <- c(min(df$date), max(df$date))
  plotColors <- c("blue", 'rgb(205, 12, 24)')
  pAxisSpacer <- 0.07
  
  plot <- plot_ly(df, x = ~date) %>%
    add_lines(y = ~rain_mm.sum, 
              type="scatter",
              mode="lines",
              name='Rain (mm)',
              fill = 'tozeroy',
              line = list(color = plotColors[1], width = 1.5)
    ) %>%
    add_lines(y = ~raindays, 
              type="scatter",
              mode="lines",
              name='Raindays (Days)',
              yaxis='y2', 
              line = list(color = plotColors[2], width = 1.5, dash = 'dot')
    ) %>%
    add_lines(y = ~r90, 
              type="scatter",
              mode="lines",
              name='R90 (Days)',
              yaxis='y2', 
              line = list(color = 'red', width = 1, dash = 'lines')
    ) %>%
    add_lines(y = ~r10, 
              type="scatter",
              mode="lines",
              name='R10 (Days)',
              yaxis='y2', 
              line = list(color = plotColors[2], width = 2, dash = 'lines+markers')
    ) %>% 
    layout(
      xaxis = list(title = "Date & Time", 
                   domain = c(pAxisSpacer*3, 1), 
                   type = "date",
                   range = dateRange, 
                   ticks='outside', 
                   zeroline=TRUE, 
                   showline = T),
      yaxis = list(title = 'mm', 
                   side = "left", 
                   color = plotColors[1], 
                   range = c(minyaxis1,maxyaxis1), 
                   ticks='outside', 
                   dtick = 100, 
                   tick0 = minyaxis1, 
                   tickmode = "linear",
                   position = 0,
                   anchor = 'free', 
                   zeroline = F, 
                   showline = T),
      yaxis2 = list(title = 'days', 
                    side = "right",
                    color = plotColors[2],
                    range = c(minyaxis2,maxyaxis2), 
                    ticks='outside', 
                    dtick = 5, 
                    tick0 = minyaxis2, 
                    tickmode = "linear", 
                    position = pAxisSpacer, 
                    overlaying = "y",
                    anchor = 'free',
                    zeroline=F, 
                    showline = T),
      legend = list(x=pAxisSpacer*3.5, y= 1), 
      showlegend = T,
      title = list(text = " ")
    )
  return(plot)
  
  }) # Plot for rainfall extreme
  }

shinyApp(ui, server)